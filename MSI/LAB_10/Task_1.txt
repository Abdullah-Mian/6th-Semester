#include <stdio.h> 
#include <stm32f4xx.h> 

void lcd_ini(void); 
void lcd_data(char j); 
void lcd_cmd(char i); 
char keypad(void); 
void lcd_string(char *str);

volatile uint32_t msTicks;                      /* counts 1ms timeTicks */ 

/*---------------------------------------------------------------------------- 
  SysTick_Handler 
 *----------------------------------------------------------------------------*/ 
void SysTick_Handler(void) { 
  msTicks++; 
} 

void Delay(uint32_t dlyTicks) {                                               
  uint32_t loop=0,dly=0,loope=0; 
  dly = dlyTicks;  
  for(loop=0;loop<dly;loop++){ 
    for(loope=0;loope<29000;loope++){ 
      __nop(); 
    } 
  } 
} 

unsigned long LCDDATA=0; 

int main(void) { 
  SystemCoreClockUpdate();                 // Get Core Clock Frequency 
  
  /*---------------------------------------------------------------------------- 
    GPIO Configuration for LCD and Keypad
   *----------------------------------------------------------------------------*/            
  // Enable clock for GPIOB, GPIOD, and GPIOE
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN;
  
  // Configure GPIOB pins for LCD control
  GPIOB->MODER &= ~(GPIO_MODER_MODER0 | GPIO_MODER_MODER1 | GPIO_MODER_MODER3);
  GPIOB->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0); // PB0 (RW), PB1 (RS) as output
  GPIOB->MODER |= GPIO_MODER_MODER3_0; // PB3 as input for keypad column 3
  
  // Configure GPIOE pins for LCD data and enable
  GPIOE->MODER &= ~(GPIO_MODER_MODER7 | GPIO_MODER_MODER8 | GPIO_MODER_MODER9 |
                   GPIO_MODER_MODER10 | GPIO_MODER_MODER11 | GPIO_MODER_MODER12 |
                   GPIO_MODER_MODER13 | GPIO_MODER_MODER14 | GPIO_MODER_MODER15);
  GPIOE->MODER |= (GPIO_MODER_MODER7_0 | GPIO_MODER_MODER8_0 | GPIO_MODER_MODER9_0 |
                  GPIO_MODER_MODER10_0 | GPIO_MODER_MODER11_0 | GPIO_MODER_MODER12_0 |
                  GPIO_MODER_MODER13_0 | GPIO_MODER_MODER14_0 | GPIO_MODER_MODER15_0);
  
  // Configure GPIOD pins for keypad
  // Rows (PD2, PD4, PD6, PD7) as output
  GPIOD->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER4 | GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
  GPIOD->MODER |= (GPIO_MODER_MODER2_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0);
  
  // Columns (PD1, PD3) as input with pull-down
  GPIOD->MODER &= ~(GPIO_MODER_MODER1 | GPIO_MODER_MODER3);
  GPIOD->PUPDR &= ~(GPIO_PUPDR_PUPDR1 | GPIO_PUPDR_PUPDR3);
  GPIOD->PUPDR |= (GPIO_PUPDR_PUPDR1_1 | GPIO_PUPDR_PUPDR3_1); // Pull-down
  
  // Column 3 (PB3) as input with pull-down
  GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR3;
  GPIOB->PUPDR |= GPIO_PUPDR_PUPDR3_1; // Pull-down
  
  GPIOB->BSRRH = (1 << 0);    // LCD RW -> 0 (Write mode)
  
  // Initialize LCD
  lcd_ini(); 
  lcd_cmd(0x80);  // line 1 
  lcd_string("   KEYPAD 4x3   ");
  
  while(1) { 
    keypad();   
  } 
} 

void lcd_ini(void) {
  Delay(50);
  lcd_cmd(0x38);  // 8-bit mode, 2 lines
  Delay(5);
  lcd_cmd(0x0C);  // Display ON, cursor OFF
  Delay(5);
  lcd_cmd(0x01);  // Clear display
  Delay(20);
}

void lcd_cmd(char i) {
  GPIOB->BSRRH = (1 << 1);    // RS=0 for command
  
  // Set data on PE8-PE15
  GPIOE->ODR &= 0x000000FF;
  GPIOE->ODR |= ((uint32_t)i << 8);
  
  // Generate Enable pulse
  GPIOE->BSRRL = (1 << 7);    // Enable high
  Delay(1);
  GPIOE->BSRRH = (1 << 7);    // Enable low
  Delay(5);
}

void lcd_data(char j) {
  GPIOB->BSRRL = (1 << 1);    // RS=1 for data
  
  // Set data on PE8-PE15
  GPIOE->ODR &= 0x000000FF;
  GPIOE->ODR |= ((uint32_t)j << 8);
  
  // Generate Enable pulse
  GPIOE->BSRRL = (1 << 7);    // Enable high
  Delay(1);
  GPIOE->BSRRH = (1 << 7);    // Enable low
  Delay(5);
}

void lcd_string(char *str) {
  while(*str) {
    lcd_data(*str++);
  }
}

char keypad(void) { 
  char key_pressed = 0;  
  static char last_key = 0;
  
  /*Row 1 = 1 & scanning of Col 1, Col 2, Col 3*/ 
  GPIOD->BSRRL = (1 << 7);    // Row 1 high
  GPIOD->BSRRH = (1 << 6);    // Row 2 low
  GPIOD->BSRRH = (1 << 4);    // Row 3 low
  GPIOD->BSRRH = (1 << 2);    // Row 4 low
  Delay(5);  // Small delay for signal stabilization
  
  if((GPIOD->IDR & 0x00000002) == 0x00000002) {  // Column 1 (PD1)
    key_pressed = '1';
  }
  else if((GPIOD->IDR & 0x00000008) == 0x00000008) {  // Column 2 (PD3)
    key_pressed = '2';
  }
  else if((GPIOB->IDR & 0x00000008) == 0x00000008) {  // Column 3 (PB3)
    key_pressed = '3';
  }

  /*Row 2 = 1 & scanning of Col 1, Col 2, Col 3*/ 
  GPIOD->BSRRH = (1 << 7);    // Row 1 low
  GPIOD->BSRRL = (1 << 6);    // Row 2 high
  GPIOD->BSRRH = (1 << 4);    // Row 3 low
  GPIOD->BSRRH = (1 << 2);    // Row 4 low
  Delay(5);
  
  if((GPIOD->IDR & 0x00000002) == 0x00000002) {  // Column 1 (PD1)
    key_pressed = '4';
  }
  else if((GPIOD->IDR & 0x00000008) == 0x00000008) {  // Column 2 (PD3)
    key_pressed = '5';
  }
  else if((GPIOB->IDR & 0x00000008) == 0x00000008) {  // Column 3 (PB3)
    key_pressed = '6';
  }

  /*Row 3 = 1 & scanning of Col 1, Col 2, Col 3*/ 
  GPIOD->BSRRH = (1 << 7);    // Row 1 low
  GPIOD->BSRRH = (1 << 6);    // Row 2 low
  GPIOD->BSRRL = (1 << 4);    // Row 3 high
  GPIOD->BSRRH = (1 << 2);    // Row 4 low
  Delay(5);
  
  if((GPIOD->IDR & 0x00000002) == 0x00000002) {  // Column 1 (PD1)
    key_pressed = '7';
  }
  else if((GPIOD->IDR & 0x00000008) == 0x00000008) {  // Column 2 (PD3)
    key_pressed = '8';
  }
  else if((GPIOB->IDR & 0x00000008) == 0x00000008) {  // Column 3 (PB3)
    key_pressed = '9';
  }

  /*Row 4 = 1 & scanning of Col 1, Col 2, Col 3*/ 
  GPIOD->BSRRH = (1 << 7);    // Row 1 low
  GPIOD->BSRRH = (1 << 6);    // Row 2 low
  GPIOD->BSRRH = (1 << 4);    // Row 3 low
  GPIOD->BSRRL = (1 << 2);    // Row 4 high
  Delay(5);
  
  if((GPIOD->IDR & 0x00000002) == 0x00000002) {  // Column 1 (PD1)
    key_pressed = '*';
  }
  else if((GPIOD->IDR & 0x00000008) == 0x00000008) {  // Column 2 (PD3)
    key_pressed = '0';
  }
  else if((GPIOB->IDR & 0x00000008) == 0x00000008) {  // Column 3 (PB3)
    key_pressed = '#';
  }

  // Display the key if pressed and different from last key (debouncing)
  if(key_pressed != 0 && key_pressed != last_key) {
    lcd_cmd(0xC7);  // line 2, position 7
    lcd_data(key_pressed);
    last_key = key_pressed;
    Delay(200);  // Debounce delay
  }
  else if(key_pressed == 0) {
    last_key = 0;  // Reset when no key is pressed
  }
  
  return key_pressed;
}

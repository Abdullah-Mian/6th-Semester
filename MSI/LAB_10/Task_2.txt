#include <stdio.h>
#include <stm32f4xx.h>

// Function prototypes
void GPIO_Init(void);
void SystemClock_Config(void);
void Delay_ms(uint32_t delay);
char keypad_scan(void);
void display_7segment(char key);
void clear_7segment(void);
void test_7segment(void);

// Global variables
volatile uint32_t msTicks = 0;

/*----------------------------------------------------------------------------
  SysTick_Handler - 1ms system tick
 *----------------------------------------------------------------------------*/
void SysTick_Handler(void) {
    msTicks++;
}

/*----------------------------------------------------------------------------
  Millisecond delay function using SysTick
 *----------------------------------------------------------------------------*/
void Delay_ms(uint32_t delay) {
    uint32_t startTick = msTicks;
    while((msTicks - startTick) < delay);
}

/*----------------------------------------------------------------------------
  7-Segment Display Patterns (Common Cathode)
  Bit order: G F E D C B A DP (MSB to LSB)
 *----------------------------------------------------------------------------*/
const uint8_t seven_seg_patterns[] = {
    0x3F,  // 0: 0011 1111 (A,B,C,D,E,F on)
    0x06,  // 1: 0000 0110 (B,C on)
    0x5B,  // 2: 0101 1011 (A,B,D,E,G on)
    0x4F,  // 3: 0100 1111 (A,B,C,D,G on)
    0x66,  // 4: 0110 0110 (B,C,F,G on)
    0x6D,  // 5: 0110 1101 (A,C,D,F,G on)  
    0x7D,  // 6: 0111 1101 (A,C,D,E,F,G on)
    0x07,  // 7: 0000 0111 (A,B,C on)
    0x7F,  // 8: 0111 1111 (All segments on)
    0x6F,  // 9: 0110 1111 (A,B,C,D,F,G on)
    0x77,  // A: 0111 0111 (A,B,C,E,F,G on) for *
    0x7C,  // b: 0111 1100 (C,D,E,F,G on) for #
    0x00   // Blank: 0000 0000 (All segments off)
};

/*----------------------------------------------------------------------------
  MAIN function
 *----------------------------------------------------------------------------*/
int main(void) {
    char pressed_key = 0;
    char last_key = 0;
    
    // Configure system clock
    SystemClock_Config();
    
    // Configure SysTick for 1ms interrupts
    if (SysTick_Config(SystemCoreClock / 1000)) {
        while (1); // Capture error
    }
    
    // Initialize GPIO ports
    GPIO_Init();
    
    // Test 7-segment display first
    test_7segment();
    
    // Clear display and start keypad scanning
    clear_7segment();
    Delay_ms(500);
    
    while(1) {
        pressed_key = keypad_scan();
        
        // Display key if pressed and different from last key
        if(pressed_key != 0 && pressed_key != last_key) {
            display_7segment(pressed_key);
            last_key = pressed_key;
            Delay_ms(300);  // Debounce delay
        }
        else if(pressed_key == 0) {
            last_key = 0;  // Reset when no key is pressed
        }
        
        Delay_ms(50);  // Scanning delay
    }
}

/*----------------------------------------------------------------------------
  System Clock Configuration (Optional - can use default HSI)
 *----------------------------------------------------------------------------*/
void SystemClock_Config(void) {
    // Using default HSI (16 MHz) for simplicity
    // You can configure PLL for higher frequencies if needed
    SystemCoreClockUpdate();
}

/*----------------------------------------------------------------------------
  GPIO Initialization for STM32F4 Training Board
 *----------------------------------------------------------------------------*/
void GPIO_Init(void) {
    // Enable clocks for GPIO ports B, C, D, and E
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | 
                    RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN;
    
    /*------------------------------------------------------------------------
      Keypad Configuration (4x3 Matrix)
      Rows: PD7, PD6, PD4, PD2 (Output, Push-Pull)
      Cols: PD1, PD3, PB3 (Input with pull-down resistors)
     *------------------------------------------------------------------------*/
    
    // Configure keypad row pins as output (push-pull, high speed)
    GPIOD->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER4 | 
                     GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
    GPIOD->MODER |= (GPIO_MODER_MODER2_0 | GPIO_MODER_MODER4_0 | 
                    GPIO_MODER_MODER6_0 | GPIO_MODER_MODER7_0);
    
    // Set output type to push-pull (default, but explicitly set)
    GPIOD->OTYPER &= ~((1 << 2) | (1 << 4) | (1 << 6) | (1 << 7));
    
    // Set high speed
    GPIOD->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR2_1 | GPIO_OSPEEDER_OSPEEDR4_1 | 
                      GPIO_OSPEEDER_OSPEEDR6_1 | GPIO_OSPEEDER_OSPEEDR7_1);
    
    // Configure keypad column pins as input with pull-down
    GPIOD->MODER &= ~(GPIO_MODER_MODER1 | GPIO_MODER_MODER3);
    GPIOD->PUPDR &= ~(GPIO_PUPDR_PUPDR1 | GPIO_PUPDR_PUPDR3);
    GPIOD->PUPDR |= (GPIO_PUPDR_PUPDR1_1 | GPIO_PUPDR_PUPDR3_1);
    
    // Configure PB3 as input with pull-down for column 3
    GPIOB->MODER &= ~GPIO_MODER_MODER3;
    GPIOB->PUPDR &= ~GPIO_PUPDR_PUPDR3;
    GPIOB->PUPDR |= GPIO_PUPDR_PUPDR3_1;
    
    /*------------------------------------------------------------------------
      Additional buttons configuration (PC6, PC7) - Input with pull-down
     *------------------------------------------------------------------------*/
    GPIOC->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER7);
    GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR6 | GPIO_PUPDR_PUPDR7);
    GPIOC->PUPDR |= (GPIO_PUPDR_PUPDR6_1 | GPIO_PUPDR_PUPDR7_1); // Pull-down
    
    /*------------------------------------------------------------------------
      7-Segment Display Configuration
      Based on training board pin mapping:
      Segments: A=PC13, B=PE5, C=PE6, D=PE4, E=PE2, F=PB5, G=PB7, DP=PB4
     *------------------------------------------------------------------------*/
    
    // Configure GPIOB pins for 7-segment: PB4(DP), PB5(F), PB7(G)
    GPIOB->MODER &= ~(GPIO_MODER_MODER4 | GPIO_MODER_MODER5 | GPIO_MODER_MODER7);
    GPIOB->MODER |= (GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER7_0);
    GPIOB->OTYPER &= ~((1 << 4) | (1 << 5) | (1 << 7)); // Push-pull
    GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR4_1 | GPIO_OSPEEDER_OSPEEDR5_1 | 
                      GPIO_OSPEEDER_OSPEEDR7_1); // High speed
    
    // Configure GPIOC pin for 7-segment: PC13(A)
    GPIOC->MODER &= ~GPIO_MODER_MODER13;
    GPIOC->MODER |= GPIO_MODER_MODER13_0;
    GPIOC->OTYPER &= ~(1 << 13); // Push-pull
    GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_1; // High speed
    
    // Configure GPIOE pins for 7-segment: PE2(E), PE4(D), PE5(B), PE6(C)
    GPIOE->MODER &= ~(GPIO_MODER_MODER2 | GPIO_MODER_MODER4 | 
                     GPIO_MODER_MODER5 | GPIO_MODER_MODER6);
    GPIOE->MODER |= (GPIO_MODER_MODER2_0 | GPIO_MODER_MODER4_0 | 
                    GPIO_MODER_MODER5_0 | GPIO_MODER_MODER6_0);
    GPIOE->OTYPER &= ~((1 << 2) | (1 << 4) | (1 << 5) | (1 << 6)); // Push-pull
    GPIOE->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR2_1 | GPIO_OSPEEDER_OSPEEDR4_1 | 
                      GPIO_OSPEEDER_OSPEEDR5_1 | GPIO_OSPEEDER_OSPEEDR6_1); // High speed
    
    // Initialize all 7-segment outputs to low (segments off)
    clear_7segment();
    
    // Initialize keypad rows to low
    GPIOD->BSRRH = (1 << 7) | (1 << 6) | (1 << 4) | (1 << 2);
}

/*----------------------------------------------------------------------------
  Test 7-Segment Display - Test each segment individually
 *----------------------------------------------------------------------------*/
void test_7segment(void) {
    // Test each segment individually
    clear_7segment();
    Delay_ms(500);
    
    // Test segment A (PC13)
    GPIOC->BSRRL = (1 << 13);
    Delay_ms(300);
    clear_7segment();
    Delay_ms(100);
    
    // Test segment B (PE5)
    GPIOE->BSRRL = (1 << 5);
    Delay_ms(300);
    clear_7segment();
    Delay_ms(100);
    
    // Test segment C (PE6)
    GPIOE->BSRRL = (1 << 6);
    Delay_ms(300);
    clear_7segment();
    Delay_ms(100);
    
    // Test segment D (PE4)
    GPIOE->BSRRL = (1 << 4);
    Delay_ms(300);
    clear_7segment();
    Delay_ms(100);
    
    // Test segment E (PE2)
    GPIOE->BSRRL = (1 << 2);
    Delay_ms(300);
    clear_7segment();
    Delay_ms(100);
    
    // Test segment F (PB5)
    GPIOB->BSRRL = (1 << 5);
    Delay_ms(300);
    clear_7segment();
    Delay_ms(100);
    
    // Test segment G (PB7)
    GPIOB->BSRRL = (1 << 7);
    Delay_ms(300);
    clear_7segment();
    Delay_ms(100);
    
    // Test DP (PB4)
    GPIOB->BSRRL = (1 << 4);
    Delay_ms(300);
    clear_7segment();
    Delay_ms(500);
    
    // Test all segments on (display "8")
    display_7segment('8');
    Delay_ms(1000);
    clear_7segment();
}

/*----------------------------------------------------------------------------
  Keypad Scanning Function - 4x3 Matrix
  Layout:
  1 2 3
  4 5 6
  7 8 9
  * 0 #
 *----------------------------------------------------------------------------*/
char keypad_scan(void) {
    char key_pressed = 0;
    
    // Small delay for stable reading
    Delay_ms(1);
    
    /*Row 1 scanning (PD7)*/
    GPIOD->BSRRL = (1 << 7);    // Row 1 high
    GPIOD->BSRRH = (1 << 6) | (1 << 4) | (1 << 2);  // Other rows low
    Delay_ms(1); // Allow signal to stabilize
    
    if((GPIOD->IDR & (1 << 1))) {       // Column 1 (PD1)
        key_pressed = '1';
    }
    else if((GPIOD->IDR & (1 << 3))) {  // Column 2 (PD3)
        key_pressed = '2';
    }
    else if((GPIOB->IDR & (1 << 3))) {  // Column 3 (PB3)
        key_pressed = '3';
    }
    
    /*Row 2 scanning (PD6)*/
    GPIOD->BSRRH = (1 << 7);    // Row 1 low
    GPIOD->BSRRL = (1 << 6);    // Row 2 high
    GPIOD->BSRRH = (1 << 4) | (1 << 2);  // Other rows low
    Delay_ms(1);
    
    if((GPIOD->IDR & (1 << 1))) {       // Column 1 (PD1)
        key_pressed = '4';
    }
    else if((GPIOD->IDR & (1 << 3))) {  // Column 2 (PD3)
        key_pressed = '5';
    }
    else if((GPIOB->IDR & (1 << 3))) {  // Column 3 (PB3)
        key_pressed = '6';
    }
    
    /*Row 3 scanning (PD4)*/
    GPIOD->BSRRH = (1 << 7) | (1 << 6);  // Rows 1,2 low
    GPIOD->BSRRL = (1 << 4);    // Row 3 high
    GPIOD->BSRRH = (1 << 2);    // Row 4 low
    Delay_ms(1);
    
    if((GPIOD->IDR & (1 << 1))) {       // Column 1 (PD1)
        key_pressed = '7';
    }
    else if((GPIOD->IDR & (1 << 3))) {  // Column 2 (PD3)
        key_pressed = '8';
    }
    else if((GPIOB->IDR & (1 << 3))) {  // Column 3 (PB3)
        key_pressed = '9';
    }
    
    /*Row 4 scanning (PD2)*/
    GPIOD->BSRRH = (1 << 7) | (1 << 6) | (1 << 4);  // Rows 1,2,3 low
    GPIOD->BSRRL = (1 << 2);    // Row 4 high
    Delay_ms(1);
    
    if((GPIOD->IDR & (1 << 1))) {       // Column 1 (PD1)
        key_pressed = '*';
    }
    else if((GPIOD->IDR & (1 << 3))) {  // Column 2 (PD3)
        key_pressed = '0';
    }
    else if((GPIOB->IDR & (1 << 3))) {  // Column 3 (PB3)
        key_pressed = '#';
    }
    
    // Turn off all rows after scanning
    GPIOD->BSRRH = (1 << 7) | (1 << 6) | (1 << 4) | (1 << 2);
    
    // Check additional buttons PC6, PC7 (if they are active high)
    if((GPIOC->IDR & (1 << 6))) {       // PC6
        key_pressed = 'A';  // Additional button A
    }
    else if((GPIOC->IDR & (1 << 7))) {  // PC7
        key_pressed = 'B';  // Additional button B
    }
    
    return key_pressed;
}

/*----------------------------------------------------------------------------
  7-Segment Display Function
  Pin mapping: A=PC13, B=PE5, C=PE6, D=PE4, E=PE2, F=PB5, G=PB7, DP=PB4
 *----------------------------------------------------------------------------*/
void display_7segment(char key) {
    uint8_t pattern = 0x00;
    
    // Get the pattern for the key
    switch(key) {
        case '0': pattern = seven_seg_patterns[0]; break;
        case '1': pattern = seven_seg_patterns[1]; break;
        case '2': pattern = seven_seg_patterns[2]; break;
        case '3': pattern = seven_seg_patterns[3]; break;
        case '4': pattern = seven_seg_patterns[4]; break;
        case '5': pattern = seven_seg_patterns[5]; break;
        case '6': pattern = seven_seg_patterns[6]; break;
        case '7': pattern = seven_seg_patterns[7]; break;
        case '8': pattern = seven_seg_patterns[8]; break;
        case '9': pattern = seven_seg_patterns[9]; break;
        case '*': pattern = seven_seg_patterns[10]; break;  // Display as 'A'
        case '#': pattern = seven_seg_patterns[11]; break;  // Display as 'b'
        case 'A': pattern = seven_seg_patterns[10]; break;  // Button A
        case 'B': pattern = seven_seg_patterns[11]; break;  // Button B
        default:  pattern = seven_seg_patterns[12]; break;  // Blank
    }
    
    // Clear all 7-segment pins first
    clear_7segment();
    
    // Map pattern bits to specific pins
    // Pattern bit order: A B C D E F G DP (bit 0 to 7)
    
    if(pattern & 0x01) GPIOC->BSRRL = (1 << 13);  // Bit 0 -> PC13 (Segment A)
    if(pattern & 0x02) GPIOE->BSRRL = (1 << 5);   // Bit 1 -> PE5  (Segment B)
    if(pattern & 0x04) GPIOE->BSRRL = (1 << 6);   // Bit 2 -> PE6  (Segment C)
    if(pattern & 0x08) GPIOE->BSRRL = (1 << 4);   // Bit 3 -> PE4  (Segment D)
    if(pattern & 0x10) GPIOE->BSRRL = (1 << 2);   // Bit 4 -> PE2  (Segment E)
    if(pattern & 0x20) GPIOB->BSRRL = (1 << 5);   // Bit 5 -> PB5  (Segment F)
    if(pattern & 0x40) GPIOB->BSRRL = (1 << 7);   // Bit 6 -> PB7  (Segment G)
    if(pattern & 0x80) GPIOB->BSRRL = (1 << 4);   // Bit 7 -> PB4  (DP)
}

/*----------------------------------------------------------------------------
  Clear 7-Segment Display
 *----------------------------------------------------------------------------*/
void clear_7segment(void) {
    // Clear all 7-segment pins: A=PC13, B=PE5, C=PE6, D=PE4, E=PE2, F=PB5, G=PB7, DP=PB4
    GPIOC->BSRRH = (1 << 13);  // Clear PC13 (A)
    GPIOE->BSRRH = (1 << 5) | (1 << 6) | (1 << 4) | (1 << 2);  // Clear PE5,PE6,PE4,PE2 (B,C,D,E)
    GPIOB->BSRRH = (1 << 5) | (1 << 7) | (1 << 4);  // Clear PB5,PB7,PB4 (F,G,DP)
}

# -*- coding: utf-8 -*-
"""Copy of Data Pre-processing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16V84S7zW0UVxcU8bNncAl4Bqx3CqfxWv

# Data Preprocessing Tools

## Splitting the dataset into the Training set and Test set

## Feature Scaling
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error

# Load the dataset
dataset = pd.read_csv('/content/USA_Housing.csv')
# Assuming 'Price' is the correct column for the target variable
# Adjust 'Price' if it's a different column name in your dataset
y = dataset['Price'].values
X = dataset.drop('Price', axis=1).values # Drop the target variable 'Price'

# Taking care of missing data for all numerical features before OneHotEncoding
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
# Applying imputer to all numerical features, assuming they start from index 0
numerical_features_indices = [0, 1, 2, 3, 4]  # Indices of numerical features
imputer.fit(X[:, numerical_features_indices])
X[:, numerical_features_indices] = imputer.transform(X[:, numerical_features_indices])

# Encoding categorical data (Address)
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(sparse_output=False, handle_unknown='ignore'), [5])], remainder='passthrough') # Assuming Address is at index 5 after dropping 'Price'
X = np.array(ct.fit_transform(X))

# Splitting the dataset into the Training set and Test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# Feature Scaling - Adjust column indices after OneHotEncoding
num_categories_encoded = len(ct.transformers_[0][1].categories_[0])
start_index_numerical_features = num_categories_encoded
sc = StandardScaler()
X_train[:, start_index_numerical_features:] = sc.fit_transform(X_train[:, start_index_numerical_features:])
X_test[:, start_index_numerical_features:] = sc.transform(X_test[:, start_index_numerical_features:])

# Training the Linear Regression model on the Training set
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Predicting the Test set results
y_pred = regressor.predict(X_test)

# Comparing Predicted vs. Actual Prices
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(df)

# Calculate metrics for evaluation
r2 = r2_score(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print(f"R-squared: {r2}")
print(f"RMSE: {rmse}")
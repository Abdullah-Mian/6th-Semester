# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uAs6BNxHpQe1ipmo2bjuQVy2bekWrn9G
"""

# Define the knowledge base with rules for medical diagnosis
knowledge_base = {
    "rule1": {
        "if": {"fever", "cough"},
        "then": "common_cold",
        "certainty": 0.7
    },
    "rule2": {
        "if": {"fever", "headache", "stiff_neck"},
        "then": "meningitis",
        "certainty": 0.9
    },
    "rule3": {
        "if": {"common_cold", "lasts_more_than_10_days"},
        "then": "sinus_infection",
        "certainty": 0.8
    }
}

# Define the inference engine with forward chaining
def expert_system(initial_symptoms, knowledge_base):
    """
    Implements a forward-chaining inference engine.
    Starts with initial symptoms, applies rules iteratively, and collects diagnoses.
    """
    working_memory = set(initial_symptoms)  # Current facts, starting with user symptoms
    diagnoses = []  # Store diagnoses with their certainties
    while True:
        new_conclusions = []  # Track new conclusions in this iteration
        for rule_name, rule in knowledge_base.items():
            # Check if all conditions of the rule are in working memory
            if all(condition in working_memory for condition in rule["if"]):
                conclusion = rule["then"]
                # If conclusion is new, add it to working memory and diagnoses
                if conclusion not in working_memory:
                    new_conclusions.append((conclusion, rule["certainty"]))
                    working_memory.add(conclusion)
        # If no new conclusions are made, stop the loop
        if not new_conclusions:
            break
        diagnoses.extend(new_conclusions)  # Add new conclusions to diagnoses
    return diagnoses

# Define the user interface
def run_expert_system():
    """Prompts user for symptoms and displays possible diagnoses."""
    print("Medical Diagnosis Expert System")
    print("Enter symptoms separated by commas (e.g., fever, cough, headache, stiff_neck):")
    user_input = input().strip().lower()  # Get and normalize user input
    symptoms = [s.strip() for s in user_input.split(",")]  # Process input into list
    diagnoses = expert_system(symptoms, knowledge_base)  # Get diagnoses
    if diagnoses:
        print("\nPossible conditions:")
        for condition, certainty in diagnoses:
            print(f" - {condition} (certainty: {certainty*100}%)")
    else:
        print("No matching conditions found for these symptoms.")

# Run the expert system
run_expert_system()
# -*- coding: utf-8 -*-
"""Lab6_draft.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hIRQnX5WpWedXjKuDZM0ulE9MBR0yB6g
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import numpy as np
from sklearn import linear_model
import pandas as pd
import matplotlib.pyplot as plt

df=pd.read_excel("/content/USA_Housing.xlsx")
df.head()



print(df.describe())

df.corr()

Y_POSITION=5

# Code for feature extraction and model splitting
model_1_features = [i for i in range(0, Y_POSITION)]

# Extracting features (X) and target variable (Y) from the DataFrame (df)
X = df.iloc[:, model_1_features]
Y = df.iloc[:, Y_POSITION]

# Splitting data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=2020)

X_test

from sklearn.linear_model import LinearRegression
lreg=LinearRegression()
lreg.fit(X_train,y_train)

y_pred=lreg.predict(X_test)

from sklearn.metrics import mean_squared_error
print('Linear Regression model')
print('--'*30)
mse=mean_squared_error(y_test,y_pred)
print('Mean Squared Error:',mse)

from sklearn import tree


model2 = tree.DecisionTreeRegressor()
model2.fit(X_train, y_train)

print("Decision Tree")
print("=================================")

y_pred_train2 = model2.predict(X_train)
RMSE_train2 = mean_squared_error(y_train, y_pred_train2)
print("Decision Tree Train set: RMSE {}".format(RMSE_train2))

y_pred_test2 = model2.predict(X_test)
RMSE_test2 = mean_squared_error(y_test, y_pred_test2)
print("Decision Tree Test set: RMSE {}".format(RMSE_test2))

print("=================================")

# Assuming you already have the trained model and predictions:
y_pred_train2 = model2.predict(X_train)

plt.scatter(range(len(y_train)), y_train, color='black', label='Actual')
plt.scatter(range(len(y_pred_train2)), y_pred_train2, color='red', label='Predicted')
plt.title('Decision Tree Regression - Training Set')
plt.xlabel('X-axis label')
plt.ylabel('Y-axis label')
plt.legend()
plt.show()

# Predictions on the test set
y_pred_test2 = model2.predict(X_test)

plt.scatter(range(len(y_test)), y_test, color='black', label='Actual')
plt.scatter(range(len(y_pred_test2)), y_pred_test2, color='blue', label='Predicted')
plt.title('Decision Tree Regression - Test Set')
plt.xlabel('X-axis label')
plt.ylabel('Y-axis label')
plt.legend()
plt.show()

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

model3 = RandomForestRegressor()
model3.fit(X_train, y_train)

print("Random Forest Regressor")
print("=================================")

y_pred_train3 = model3.predict(X_train)
RMSE_train3 = mean_squared_error(y_train, y_pred_train3)
print("Random Forest Regressor TrainSet: RMSE {}".format(RMSE_train3))

y_pred_test3 = model3.predict(X_test)
RMSE_test3 = mean_squared_error(y_test, y_pred_test3)
print("Random Forest Regressor TestSet: RMSE {}".format(RMSE_test3))

print("=================================")

# Predictions on the training set
y_pred_train3 = model3.predict(X_train)

plt.scatter(range(len(y_train)), y_train, color='black', label='Actual')
plt.scatter(range(len(y_pred_train3)), y_pred_train3, color='blue', label='Predicted (Random Forest)')
plt.title('Random Forest Regression - Training Set')
plt.xlabel('X-axis label')
plt.ylabel('Y-axis label')
plt.legend()
plt.show()

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(30,20))
plot_tree(model2, filled=True, feature_names=X.columns, rounded=True)
plt.title("Decision Tree Visualization")
plt.show()

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(30, 15))  # Increase figure size for better readability
plot_tree(model2, max_depth=1, filled=True, feature_names=X.columns, rounded=True)
plt.title("Decision Tree Visualization (Limited Depth)")
plt.show()

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(30, 15))
plot_tree(model2, max_depth=2, filled=True, feature_names=X.columns, rounded=True,
          node_ids=True, fontsize=10)  # added node_ids to add labels
plt.title("Decision Tree Visualization (Limited Depth)")
plt.show()
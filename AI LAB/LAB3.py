# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cj-0N6wzWQKXt6yW5ArrU_kHqYQKoZ6c
"""

def greetings(name):
    print(f"welcome {name}")

greetings("ahmed")

def calc(a,b):
  return a + b
result = calc(3,5)

print(result)

def power(base, exp):
  return base ** exp
result = power(2,5)

print(result)

def sumAll(*num):
  return sum(num)
result = sumAll(1,2,3,4,5,6,7,8)

print(result)

square = lambda num: num ** 2
result = square(5)

print(result)

def count_even_numbers(number_list):
  evenCount = 0
  for num in number_list:
    if num % 2 == 0:
      evenCount += 1
  return evenCount

def count_odd_numbers(number_list):
  OddCount = 0
  for num in number_list:
    if num % 2 != 0:
      OddCount += 1
  return OddCount

numbers1 = [1,2,4,5,1,3,1,2]
numbers2 = [5,7,3,2,6,5,9,7]
nunmbers3 = []
print("Even count:")
print(count_even_numbers(numbers1))
print(count_even_numbers(numbers2))
print(count_even_numbers(nunmbers3))

print("odd count: ")
print(count_odd_numbers(numbers1))
print(count_odd_numbers(numbers2))
print(count_odd_numbers(nunmbers3))

def calculate_gpa(student_data):
    def get_grade_point(mark):
        if mark >= 85:
            return 4.00
        elif 80 <= mark <= 84:
            return 3.66
        elif 75 <= mark <= 79:
            return 3.33
        elif 71 <= mark <= 74:
            return 3.00
        elif 68 <= mark <= 70:
            return 2.66
        elif 64 <= mark <= 67:
            return 2.33
        elif 61 <= mark <= 63:
            return 2.00
        elif 58 <= mark <= 60:
            return 1.66
        elif 54 <= mark <= 57:
            return 1.30
        elif 50 <= mark <= 53:
            return 1.00
        else:
            return 0.00

    def get_letter_grade(mark):
        if mark >= 85:
            return 'A'
        elif 80 <= mark <= 84:
            return 'A-'
        elif 75 <= mark <= 79:
            return 'B'
        elif 71 <= mark <= 74:
            return 'B-'
        elif 68 <= mark <= 70:
            return 'C'
        elif 64 <= mark <= 67:
            return 'C-'
        elif 61 <= mark <= 63:
            return 'D'
        elif 58 <= mark <= 60:
            return 'D-'
        elif 54 <= mark <= 57:
            return 'D-'
        elif 50 <= mark <= 53:
            return 'F'
        else:
            return 'F'

    result = []

    for student in student_data:
        marks = student['marks']
        grade_points = [get_grade_point(mark) for mark in marks]
        grades = [get_letter_grade(mark) for mark in marks]
        gpa = sum(grade_points) / len(grade_points)
        letterGrade = get_letter_grade(gpa)

        result.append({
            'name': student['name'],
            'marks': marks,
            'grades': grades,
            'grade_points': grade_points,
            'gpa': round(gpa, 2),
            'letterGrade': letterGrade

        })

    return result


student_data = [
    {'name': 'Adeel', 'marks': [15, 78, 76, 52, 45]},
    {'name': 'Ali Hamza', 'marks': [100, 100, 100, 100, 100]},
    {'name': 'Faizan', 'marks': [25, 22, 19, 18, 15]},
    {'name': 'David', 'marks': [60, 70, 65, 55, 75]},
    {'name': 'Eve', 'marks': [90, 92, 88, 95, 98]}
]


result = calculate_gpa(student_data)


for student in result:
    print(f"Name: {student['name']}")
    print(f"Marks: {student['marks']}")
    print(f"Grades: {student['grades']}")
    print(f"Grade Points: {student['grade_points']}")
    print(f"GPA: {student['gpa']}")
    print(f"Letter Grade: {student['letterGrade']}")
    print("------------------")

class Student:
    def __init__(self, name, roll_number, marks=None):
        self.name = name
        self.roll_number = roll_number
        self.marks = marks if marks else []

    def add_marks(self, new_marks):
        self.marks.extend(new_marks)

    def calculate_average(self):
        if len(self.marks) == 0:
            return 0  class Book:
    # Constructor to initialize the attributes of the book
    def _init_(self, title, author):
        self.title = title
        self.author = author
        self.availability_status = True  # A book is available by default

    # Method to borrow the book
    def borrow(self):
        if self.availability_status:
            self.availability_status = False
            print(f"You have successfully borrowed '{self.title}' by {self.author}.")
        else:
            print(f"Sorry, '{self.title}' by {self.author} is currently unavailable.")

    # Method to return the book
    def return_book(self):
        if not self.availability_status:
            self.availability_status = True
            print(f"Thank you for returning '{self.title}' by {self.author}.")
        else:
            print(f"'{self.title}' was not borrowed.")

# Create instances of books in the library
book1 = Book("The Catcher in the Rye", "J.D. Salinger")
book2 = Book("To Kill a Mockingbird", "Harper Lee")
book3 = Book("1984", "George Orwell")

# Simulating borrowing and returning books
book1.borrow()  # Borrowing book1
book1.borrow()  # Trying to borrow book1 again (it should be unavailable)
book1.return_book()  # Returning book1
book1.return_book()  # Trying to return book1 again (it should not be borrowed)

book2.borrow()  # Borrowing book2
book2.return_book()  # Returning book2
book3.borrow()  # Borrowing book3
        return sum(self.marks) / len(self.marks)

student1 = Student("Ali Hamza", 1001)

student1.add_marks([88, 76,15,45])

average_marks = student1.calculate_average()
print(f"The average marks of {student1.name} (Roll Number: {student1.roll_number}) are: {average_marks}")

